Docker

 - Docker is a software development plarform to deploy apps
 - Apps are packaged in containers that can be run on any OS
 - Apps run the same, regardless of where they're run
 - Docker is useful because:
    1. Makes apps run on any machine
    2. Makes it so the app has no compatibility issues
    3. Has predictable behavior
    4. Makes the app require less work
    5. Makes app easier to maintain and deploy
    6. It works with any language, any OS, any technology
 - Use cases are:
    1. Microservices architecture
    2. Lift-and-shift apps from on-prem to AWS cloud
    3. Anything that involves containerizing your apps

 - Docker on OS:
 - Docker can be used on any OS and server
 - Imagine you have an EC2 instance with some applications on it
 - You can use Docker to containerize the applications
 - You can containerize the front and back-end, as well as the DB
 - This allows you to ship these containers to other servers without worrying about dependencies

 - Where are Docker images stored?:
 - Docker images are stored in Docker repositories:
 - Docker Hub (https://hub.docker.com):
    1. Public repository
    2. Find base images for many technologies or OS (e.g. Ubuntu, MySQL, etc...)
 - Amazon ECR (Amazon Elastic Container Registry)
    1. Private repository
    2. Public repo (Amazon ECR Public Gallery https://gallery.ecr.aws)

 - Docker vs Virtual Machines
 - Docker is "sort of" a virtualization technology, but not quite
 - Resources are shared with the host => many containers on one server
 - The architecture for a VM is as follows:

                     Apps
                       ^
                 Guest OS (VM)
                       ^
                  Hypervisor
                       ^
                    Host OS    
                       ^
                 Infrastructure

 - When you get an EC2 instance, it is actually a VM running on the Hypervisor
 - This allows AWS to offer many different instances
 - All these VMs are separate (won't share resources)

 - Architecture for Docker containers is as follows:

                   Container
                       ^
                  Docker Daemon
                       ^
                    Host OS    
                       ^
                 Infrastructure

 - You can have multiple containers on top of the Docker Daemon
 - This allows the containers to co-inhabit together
 - Containers can share the same networking, data, etc...
 - Containers are not as secure as a VM but they allow you to run many containers on a single server

 - Starting with Docker:
 - You need to create a Docker file
 - Once files are added, you build the Image
 - The image is then pushed to a Docker repository (Docker hub or AWS ECR)
 - You can can then pull the docker image from the repository
 - Once you run the Docker image, it becomes a Docker container (which runs your application code)

 - Docker container management on AWS:
    1. Amazon Elastic Container Service (Amazon ECS):
       - Amazon's own container platform
    2. Amazon Elastic Kubernetes Service (Amazon EKS):
       - Amazon's managed Kubernetes (open source)
    3. AWS Fargate:
       - Amazon's own Serverless container platform
       - Works with ECS and EKS
    4. Amazon ECR
       - Store container images

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon ECS

 - Amazon ECS - EC2 Launch Type
 - ECS = Elastic Container Service
 - Launch Docker containers on AWS = Launch ECS tasks on ECS clusters
 - EC2 Launch type: You must provision and maintain the infrastructure (EC2 instances)
 - Each EC2 instance must run the ECS agent to register in the ECS cluster
 - AWS takes care of starting / stopping containers

 - Amazon ECS - Fargate Launch Type
 - Launch Docker containers on AWS
 - You do not provision the infrastructure (no EC2 instances to manage)
 - It is entirely serverless
 - You just create task definitions
 - AWS just runs ECS tasks for you based on the CPU / RAM you need
 - To scale, just increase the number of tasks.

 - Amazon ECS - IAM Roles for ECS
 - EC2 instance profile (EC2 launch type only):
    1. Used by ECS agent
    2. Makes API calls to ECS Service
    3. Send container logs to CloudWatch logs
    4. Pull docker image from ECR
    5. Reference sensitive data in Secrets manager or SSM parameter store
 - ECS Task Role:
    1. Allows each task to have a specific role
    2. Use different roles for the different ECS Services
    3. Task role is defined in task definition

 - Amazon ECS - Load Balancer Integrations
 - ALB is supported and works for most use cases
 - NLB is recommended only for high throughput / high performance use cases, or to pair with AWS private link

 - Amazon ECS - Data Volumes (EFS)
 - Mount EFS file systems onto ECS tasks
 - Works with both EC2 and Fargate launch types
 - Tasks running in any AZ will share the same data in the EFS file system
 - Fargate + EFS = Serverless
 - Use cases for ECS + EFS are:
    1. Persistent multi-AZ shared storage for containers

 - NOTE: Amazon S3 cannot be mounted as a file system on your ECS tasks

 - ECS Service Auto Scaling:
 - Automatically increase / decrease the desired number of ECS tasks
 - Amazon ECS Auto Scaling uses AWS Application Auto Scaling:
    1. ECS Service average CPU utilization
    2. ECS service average memory utilization - scale on RAM
    3. ALB request count per targer - metric coming from the ALB
 - Target tracking - scale based on target value for a specific CloudWatch metric
 - Step Scaling - scale based on specified CloudWatch Alarm
 - Scheduled Scaling - scale based on a specified date/time (predictable changes)
 - ECS service auto scaling (task level) does not equate to EC2 Auto Scaling (EC2 instance level)
 - Fargate auto scaling is much easier to setup (because it is serverless)

 - EC2 Launch type - Auto scaling EC2 instances:
 - Accommodate ECS Service scaling by adding underlying EC2 instances
 - Auto Scaling group scaling:
    1. Scale your ASG based on CPU utilization
    2. Add EC2 instances over time
 - ECS cluster capacity provider:
    1. Used to automatically provision and scale the infrastructure of your ECS tasks
    2. Capacity provider paired with an ASG
    3. Add EC2 instances when you're missing capacity (CPU, RAM, ...)


 - ECS - Solution Architecture:
 - You can have the below architecture with ECS tasks (example):

   Client ---(upload object)---> S3 bucket ---(event)---> Amazon EventBridge ---(rule: run ECS task)---> Task (New) ---(get object)---> S3 bucket ---(task saves result)---> DynamoDB

 - The above is a fully serverless approach for processing objects from S3 using a Docker container with ECS Fargate
 - The task has an ECS Task Role attached to it (for access to S3 & DynamoDB)
 - Fargate (and by extension the Fargate tasks) are inside of an ECS Cluster

 - The below architecture utilizes ECS tasks invoked by Event Bridge Schedule:

   Amazon EventBridge ---(Rule: run ECS task)---> Task (New) ---(batch processing)---> Amazon S3

 - The above architecture is also fully serverless
 - Again, Fargate (and the Task) is inside the ECS Cluster


 - ECS - SQS Queue example:

   ---(Messages)---> SQS Queue ---(poll for messages)---> ECS Service Auto Scaling (Service A(contains the Tasks))

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Elastic Container Registry (ECR)

 - Store and manage Docker images on AWS
 - Private and Public repository (Amazon ECR public gallery: https://gallery.ecr.aws)
 - Fully integrated with ECS, backed by Amazon S3
 - Access is controlled through IAM (permission errors => policy)
 - Supports image vulnerability scanning, versioning, image tags, image lifecycle, etc...

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Elastic Kubernetes Service (EKS)

 - It is a way to launch managed Kubernetes clusters on AWS
 - Kubernetes is an open-source system for automatic deployment, scaling and management of containerized (usually Docker) application
 - It is an alternative to ECS, similar goal but different API
 - EKS supports EC2 if you want to deploy worker nodes or Fargate to deploy serverless containers
 - Use case: if your company is already using Kubernetes on-prem or in another cloud and wants to migrate to AWS
 - Kubernetes is cloud-agnostic (can be used in any cloud platform - Azure, AWS, GCP, etc..)
 - Amazon EKS - Node types:
    1. Managed Node groups:
       - Creates and manages Nodes (EC2 instances) for you
       - Nodes are part of an ASG managed by EKS
       - Support on-demand or spot instances
    2. Self-managed nodes:
       - Nodes created by you and registered to the EKS cluster and managed by an ASG
       - You can use prebuilt AMI - Amazon EKS optimized AMI
       - Supports on-demand or spot instances
    3. AWS Fargate:
       - No maintenance required, no nodes managed

 - Amazon EKS - Data Volumes:
 - Need to specify StorageClass manifest in your EKS cluster
 - Leverages a Container Storage Interface (CSI) compliant driver
 - Support for:
    1. Amazon EBS
    2. Amazon EFS (works with Fargate)
    3. Amazon FSx for Lustre
    4. Amazon FSx for NetApp ONTAP

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

AWS App Runner

 - Fully managed service that makes it easy to deploy web applications and APIs at scale
 - No infrastructure experience required
 - Start with your source code or container image
 - Configure basic settings (vCPU, RAM, Auto Scaling, Health check)
 - After configuration, the app is created and deployed
 - You can then access it using the URL
 - Automatically builds and deploys your web app
 - Automatic scaling, highly available, load balancer, encryption
 - VPC access support
 - Use cases:
    1. Web apps
    2. APIs
    3. Microservices
    4. Rapid production deployments
 - 
