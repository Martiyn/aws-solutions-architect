AWS ELB (Elastic load balancing)

Load balancers are servers that control incoming traffic to other servers (downstream).
Load balancers have the following characteristics:
1. They spread the incoming load onto the AWS resources that are available (ex. EC2 instances).
2. They provide a single point of contact to your application (DNS).
3. They seemlessly handle failures of downstream instances.
4. They provide SSL termination (HTTPS) to your websites.
5. They have high availability across zones.
6. They can enforce stickiness with cookies.
7. They are able to separate public traffic from private traffic.
8. They have the ability to perform health checks:
   - Health checks are done on a port and route
   - Health checks determine whether a resource is healthy and able to respond to requests (ex. EC2 instances)
   - If health check response is other than 200, resource is deemed as unhealthy

Load balancer types are the following:
1. Application Load Balancer:
   - HTTP, HTTPS, Websocket
2. Network Load Balancer:
   - TCP, TLS (secure TCP), UDP
3. Gateway Load Balancer:
   - IP Protocol

!!IPORTANT:
 - Load Balancer security groups can be linked to the security groups of EC2 instances (or other resources).
 - This is for the purpose of allowing access to your EC2 instances only through the load balancer.
 - This practice adds an extra layer of security to the underlying EC2 instances.
 - HTTP and HTTPS traffic must be allowed for the load balancer security group
 - The EC2 instances security group must be modified to allow HTTP and HTTPS access only if it comes from the load balancer.

--------------------------------------------------------------------------------------------------------------------------------------------

Application Load Balancer (ALB)

The ALB is layer 7 (HTTP)
ALB can balance the load to multiple HTTP applications across multiple machines (target groups).
ALB can balance the load of multiple applications on one machine (ex: containers).
ALB supports HTTP/2 and WebSocket
ALB supports redirects (ex: from HTTP to HTTPS)
ALB can route to different target groups:
 - Routing via path in the URL (ex: example.com/users, example.com/posts).
 - Routing via hostname in the URL (ex: first.example.com, second.example.com).
 - Routing via URL query parameters (ex: example.com/users?id=123&order=false).
ALB is perfect when using micro services or container based apps (ex: Docker, AWS ECS).
ALB has a port mapping feature to redirect to a dynamic port in ECS.
ALB target groups can be:
 - EC2 instances (which can be managed by an autoscaling group) HTTP.
 - ECS tasks (managed by ECS) HTTP.
 - Lambda functions (HTTP requests translated into a JSON event).
 - IP addresses (private).
ALB can route to multiple target groups concurrently.
ALB health checks are at the target group level.
ALB has a fixed hostname (XXX.region.elb.amazonaws.com).
Application servers (ex: EC2 instances) do not see the client IP directly (due to the fact that they are communicating with the ALB).
ALB forwards the client IP with the following header: X-Forwarded-For.
ALB forwards the port with the following header: X-Forwarded-Port

--------------------------------------------------------------------------------------------------------------------------------------------

Network Load Balancer (NLB)

NLB is layer 4 (TCP/UDP).
NLB is optimized to handle millions of requests per second.
NLB has much less latency time compared to ALB (100ms vs 400ms)
NLB has one static IP per AZ.
NLB supports assigning elastic IP (useful for whitelisting a specific IP).
NLB is used for extreme performance with traffic (UDP & TCP).
NLB is not included in free tier.
NLB target groups can be:
 - EC2 instances
 - IP addresses (private)
 - Application Load Balancers
 - Health checks support TCP, HTTP & HTTPS

--------------------------------------------------------------------------------------------------------------------------------------------

Gateway Load Balancer (GWLB)

GWLB is layer 4 (IP packets)
GLWB is used for the management of a fleet of third-party virtual appliances in AWS (example):
 - Firewall
 - Intrusion detection
 - Intrusion prevention
 - Deep packet inspection
 - Payload manipulation
GWLB combines the following functions:
 - Transparent Network gateway (single exit/entry for all traffic)
 - Load Balancer (distributes traffic across virtual appliances)
GWLB uses GENEVE protocol on 6081
GWLB has the following target groups:
 - EC2 instances (via instance ID)
 - IP addresses (private)
--------------------------------------------------------------------------------------------------------------------------------------------

Additional Load Balancer functionalities

Sticky sessions:
 - This implementation makes it possible for a client to always connect to the same EC2 instance behind the Load Balancer.
 - This applies to ALB and NLB
 - ALB uses a cookie in order to enforce the sticky session (has an expiration date).
 - Sticky sessions are mainly used so that users do not lose session data.
 - Sticky sessions have a possibility to bring an imbalance in the EC2 sessions load.
 - There are multiple types of cookies for sticky sessions:
    1. Custom cookie:
      - Cookie name must be individually specified for each target group.
      - Can have a custom name (cannot use AWSALB, AWSALBAPP or AWSALBTG).
      - Generated by target.
    2. Application cookie:
      - Generated by load balancer
      - Cookie name is AWSALBAPP
    3. Duration based cookie:
      - Generated by load balancer
      - Cookie name is AWSALB

Cross-zone Load Balancing:
 - With the use of cross-zone balancing, the load is distributed evenly across all EC2 instances in all Availability Zones.
 - For the ALB, cross-zone balancing is:
    1. Enabled by default (can be disavbled at target group level).
    2. Not charged for inter-AZ data.
 - For NLB, cross-zone balancing is:
    1. Disabled by default.
    2. Charged for inter-AZ data when enabled.

Deregistration delay:
 - This functionality allows time to complete any in-flight (already active) requests to EC2 instances, which are deemed as unhealthy or de-registering.
 - It stops sending new requests to the de-registering EC2 instance.
 - Can be set to 1-3600 seconds.
 - Can be turned off (0 seconds).

SSL Certificates:
 - Elastic Load Balancers have SSL certificate functionalities.
 - Load balancer uses X.509 certificate (SSL/TLS server certificate).
 - Certificates can be managed via AWS Certificate Manager.
 - There is the option to create and upload your own certificates.
 - For the HTTPS listener, you need to:
    1. Specify a default certificate
    2. You can add an optional list of certificates for multiple domains.
    3. Clients can specify SNI to specify the hostnames they reach.
    4. SNI solves the problem of using multiple certificates on one server (to serve multiple websites).
 - Both ALB and NLB support multiple listeners with multiple SSL certificates and use SNI.

--------------------------------------------------------------------------------------------------------------------------------------------

Auto Scaling Groups (ASG)

 - Auto scaling groups manage the underlying resources depending on the load.
 - Auto scaling groups allow for quick procurement or termination of resources in the cloud.
 - The goal of an ASG is:
    1. Scale out (add EC2 instances) or Scale in (remove EC2 instances) depending on the load.
    2. Ensure that there is a minimum/maximum threshold for active EC2 instances.
    3. Automatically register new EC2 instances to a Load Balancer.
    4. Re-create an EC2 instance in case a previous one has been terminated (ex. due to being unhealthy).
 - ASG are free to use (you only pay for the underlying EC2 instances).
 - ASG requires a launch template in order to launch new instances
 - Launch templates must include:
    1. AMI + instance type
    2. EC2 user data (optional)
    3. EBS volumes
    4. Security groups
    5. SSH key pair (optional)
    6. IAM roles for the EC2 instances (optional)
    7. Network + subnets information
    8. Load Balancer information
 - ASG has a min. size, max. size and initial capacity, which must be defined.
 - ASG also has scaling policies.
 - CloudWatch can be integrated with ASG (to create alarms for scaling in and out).
 - CloudWatch alarms can be configured to monitor certain metrics (ex. CPU usage).
 - ASG have scaling policies, which can be classed as the following:
    1. Target tracking scaling:
      - Easiest to setup
      - Ex. we want to set it to monitor the average CPU utilization to be about 40%
    2. Simple/Step scaling
      - Works with CloudWatch alarms (ex. an alarm keeps track of CPU usage and adds/removes instances depending on it)
      - When CPU is above 70%, add two EC2 instances
      - When CPU is below 30%, remove one EC2 instance
    3. Scheduled actions:
      - Anticipate scaling based on known usage patterns (ex. add more instances at 10:00 AM due to increased load)
    4. Predictive scaling:
      - Continuously forecast load and schedule scaling ahead of time
 - Recommended metrics to scale the ASG are:
    1. Average CPU utilization
    2. Request count per target
    3. Average Network in/out
    4. Any custom metric that you wish to create
 - After ASG scaling occurs, there is a cooldown period.
 - During the cooldown period, the ASG will not terminate or create new instances.
 - Default cooldown period is 300 seconds.

