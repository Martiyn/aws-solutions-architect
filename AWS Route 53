What is DNS

 - Domain Name System, which translates the human friendly hostnames into the machine IP addresses
 - www.google.com => 172.217.18.36
 - DNS is the backbone of the internet
 - DNS uses hierarchical naming structure
    1. .com
    2. example.com
    3. www.example.com
    4. api.example.com

 - Domain Registrar (domain registry services): Amazon Route 53, GoDaddy, ...
 - DNS Records: A, AAAA, CNAME, NS, ...
 - Zone File: contains DNS records (matches hostnames to IP addresses)
 - Name server: resolves DNS queries (Authorative or Non-Authorative)
 - Top level domain (TLD): .com, .us, .gov, .org, ...
 - Second level domain (SLD): google.com, amazon.com, ...
 - Example URL for demonstration purposes:

                http://api.www.example.com

 - "." is called the root of the URL
 - ".com." is called the top level domain (TLD)
 - ".example.com." is called the second level domain (SLD)
 - ".www.example.com." is called the Sub domain
 - "api.www.example.com" is called the Fully qualified domain name (FQDN)
 - "http" is called the protocol
 - "http://api.www.example.com" is called the URL

 - How DNS works:

 Web Browser --> Local DNS Server --> Root DNS Server --> Local DNS Server --> TLD DNS Server --> Local DNS Server --> SLD DNS Server --> Local DNS Server --> Web Browser --> Web Server

     1. The web browser makes a query to the local DNS server (managed by your company or ISP)
     2. The local DNS server makes a query to the root DNS server (managed by ICANN)
     3. The root DNS server returns a response to the local DNS server
     4. The local DNS server then queries the TLD DNS server (managed by IANA)
     5. The TLD DNS server returns a response to the local DNS server
     6. The local DNS server then queries the SLD DNS server (managed by a domain registrar)
     7. The SLD DNS server returns a response to the local DNS server
     8. The local DNS server returns the IP address of the URL to the browser
     9. The browser uses the IP address to access the web server (example.com)
     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Route 53

 - Route 53 is a highly available, scalable, fully managed and Authoritative DNS
    1. Authoritative = the customer is able to update the DNS records

 - Route 53 is also a Domain Registrar
 - Route 53 has the ability to check the health of network resources
 - Route 53 is the only AWS service, which provides 100% availability SLA
 - The name Route 53 is a reference to the traditional DNS port used by DNS services
 - Route 53 records allow you to decide how you want to route traffic for a domain
 - Each record contains the following:
    1. Domain/subdomain name - e.g., example.com
    2. Record type - e.g., A or AAAA
    3. Value - e.g., 12.34.56.78
    4. Routing policy - how Route 53 responds to queries
    5. TTL (time to live) - amount of time the record cached at DNS resolvers

 - Route 53 supports the following DNS record types:
    1. A / AAAA / CNAME / NS (must know)
    2. CAA / DS / MX / NAPTR / PTR / SOA / TXT / SPF / SRV (advanced)

 - Record types:
    1. A - maps a hostname to IPv4
    2. AAAA - maps a hostname to IPv6
    3. CNAME - maps a hostname to another hostname:
       - The target is a domain name, which must have an A or AAAA record
       - Can't create a CNAME record for the top node of a DNS namespace (Zone Apex)
       - Example of the above: you can't create for example.com, but you can create for www.example.com
    4. NS - Name servers for the Hosted Zone (Control how traffic is routed for a domain)

 - Route 53 has Hosted Zones
 - Hosted zones are a container for records that define how to route traffic to a domain and its subdomains
 - There are two types of hosted zones:
    1. Public hosted zones - contains records that specify how to route traffic on the internet (public domain names): e.g., application.mypublicdomain.com
    2. Private hosted zones - contains records that specify how you route traffic within one or more VPCs (private domain names): e.g., application.company.internal
 - You pay $0.50 per month per hosted zone (adds up to about $12.00 per year)
 - Public vs Private hosted zones:
    1. Public hosted zones:
       - Can answer queries from public clients
    2. Private hosted zones:
       - Can answer queries from within your VPC (private resources)

 - Records TTL (Time to Live) is mandatory for each DNS record except for Alias records
 - High TTL - e.g., 24hr
    1. Less traffic on Route 53
    2. Creates the possibility for outdated records
 - Low TTL - e.g., 60 sec
    1. More traffic on Route 53 (higher cost)
    2. Records are outdated for less time
    3. Easy to change records
 - TTL of the record is cached in the client for the specified amount of time
 - If there is a low TTL, then any updates of data are reflected when its duration runs out
 - If there is high TTL, the updates will take longer to reflect
 - Example of such changes can be the underlying IP address behind the hostname

 - CNAME vs. Alias
 - AWS Resources (Load Balancer, CloudFront, ...) expose an AWS hostname:
 - "lb1-1234.us-east-2.elb.amazonaws.com" and you want to make it "myapp.mydomain.com"
 - There are two options to make the above happen:
    1. CNAME:
       - Points to a hostname to any other hostname (app.mydomain.com => example.anything.com)
       - ONLY FOR NON ROOT DOMAIN (aka.something.mydomain.com)
    2. Alias (Specific to Route 53):
       - Points a hostname to an AWS resource (app.mydomain.com => example.amazonaws.com)
       - WORKS FOR ROOT DOMAIN AND NON ROOT DOMAIN (aka.mydomain.com)
       - Free of charge
       - Native health check
       - Maps a hostname to an AWS resource
       - An extension to DNS functionality
       - Automatically recognizez changes in the resource's IP addresses
       - Unlike CNAME, it can be used for the top node of a DNS namespace (Zone apex), e.g.: "example.com"
       - Alias record is always of type A or AAAA for AWS resources (IPv4 / IPv6)
       - You cannot set TTL
       - Targets are:
          1. Elastic Load Balancers
          2. CloudFront Distributions
          3. API Gateway
          4. Elastic Beanstalk environments
          5. S3 Websites
          6. VPN Interface Endpoints
          7. Global Accelerator accelerator
          8. Route 53 record in the same hosted zone
          9. CANNOT set an Alias record for an EC2 DNS name

 - Route 53 Routing policies:
 - The routing policies define how Route 53 responds to DNS queries
 - IMPORTANT: Do not get confused by the word "Routing":
    1. This is not the same as Load Balancer routing, which routes traffic
    2. DNS does not route any traffic, it only responds to DNS queries
 - Route 53 supports the following Routing Policies:
    1. Simple
       - Typically, route traffic to single resource
       - Can specify multiple values in the same record
       - If multiple values are returned, a random one is chosen by the client
       - When Alias is enabled, specify only one AWS resource
       - Cannot be associated with health checks
    2. Weighted
       - Control the % of all requests that go to each specific resource
       - Assign each record a relative weight:
          1. traffic (%) = Weight for a specific record รท Sum of all the weights for all records
       - DNS records must have the same name and type
       - Can be associated with Health checks
       - Use cases include:
          1. Load Balancing between regions
          2. Testing new application versions
       - Assign a weight of 0 to a record to stop sending traffic to a resource
       - If all records have weight of 0, then all records will be returned equally
       - The percentage of traffic can be set to e.g.: 70% -> resource 1, 20% -> resource 2, 10% resource 3
    3. Failover
    4. Latency based
       - Redirect to the resource that has the least latency close to us
       - Extremely helpful when latency for users is a priority
       - Latency is based on traffic between users and AWS regions
       - Germany users may be directed to the US (if that is the lowest latency)
       - Can be associated with Health checks (has failover capability)
    5. Geolocation
    6. Multi-Value Answer
    7. Geoproximity (using Route 53 Traffic Flow feature)

 - Route 53 Health checks
 - HTTP health checks are used mainly for public resources
 - Health check => Automated DNS Failover:
    1. Health checks that monitor an endpoint (app., server, other AWS resource)
    2. Health checks that monitor other health checks
    3. Health checks that monitor CloudWatch alarms (provides full control!):
       - e.g. throttles of DynamoDB, alarms on RDS, custom metrics, ... (helpful for private resources)
 - Health checks are integrated with CloudWatch metrics

 - Health checks for monitoring an endpoint:
 - About 15 global health checkers will check the endpoint health
 - Healthy/unhealthy threshold - 3
 - Interval - 30 sec (can set to 10 sec - higher cost)
 - Supported protocols are:
    1. HTTP
    2. HTTPS
    3. TCP
 - If > 18% of health checkers report the endpoint is healthy, Route 53 considers it healthy
 - If < 18% of health checkers report it is healthy, Route 53 considers it unhealthy
 - Ability to choose which locations you want Route 53 to use
 - Health checks pass only when the endpoint responds with the 2xx or 3xx status codes
 - Health checks can be setup to pass or fail based on the text in the first 5120 bytes of the response
 - Configure your router/firewall to allow incoming requests from Route 53 health checkers 

 - Calculated health checks: 
 - Combine the results of multiple health checks into a single health check
 - You can use OR, AND, or NOT conditions for combining health checks
 - Can monitor up to 256 child health checks
 - You can specify how many of the health checks need to pass to make the parent pass
 - Use case: Perform maintenance to your website without causing all health checks to fail
 - How to check private resources with health checks:
    1. Route 53 health checkers are outside the VPC
    2. They can't access private endpoints (private VPC or on-premises resource)
    3. You can create a CloudWatch metric and associate a CloudWatch alarm, then create a health check that checks the alarm itself
