AWS IAM

 - AWS IAM is a global (meaning it is not region locked) feature of the AWS services.
 - IAM allows users of the AWS console to create their own users for different purposes.

--------------------------------------------------------------------------------------------------------------------

IAM users

 - When initially creating an AWS account, the user starts off with a ROOT account.
 - The ROOT account has absolute full privileges over any AWS services.
 - It is considered best practice to never use the ROOT account for any tasks aside from creating an Admin account via the IAM console.
 - It is extremely important to set MFA on the ROOT account, as well as the Admin account for maximum account security.
 - Once the Admin account has been created, it must be given access to the management console, so that it can execute its admin functions properly.
 - When performing different tasks, it is advised to create IAM profiles (non-admin ones) with the sufficient privileges in order to be able to execute the relevant tasks.
 - The above-mentioned privileges are granted via IAM policies.

--------------------------------------------------------------------------------------------------------------------

IAM policies

 - IAM policies are in JSON format and are relatively easy to understand (by design).
 - Policies can be seen in the following format:

{
  "Version": "2012-10-17",
  "Statement": [{
    "Sid": "1",
    "Effect": "Allow",
    "Principal": {"AWS": ["arn:aws:iam::account-id:root"]},
    "Action": "s3:*",
    "Resource": [
      "arn:aws:s3:::mybucket",
      "arn:aws:s3:::mybucket/*"
    ]
  }]
}

 - The * symbol indicates a so-called "wildcard" (meaning it does not target a particular resource).
 - AWS policies usually contain the following parameters:
    1. Resource: This is the specified resource that the policy targets (like a particular S3 bucket or particular EC2 instance).
    2. Effect: The effect can either be "Allow" or "Deny" (to allow or deny the specified action).
    3. Action: The action that is to be targeted in the policy (ex. s3:GetObject)
    4. Statement: The statement of the policy.

--------------------------------------------------------------------------------------------------------------------

IAM Groups

 - IAM groups are groupings of users that share the same policies.
 - IAM policies can be attached to an entire group of people and will apply to said group once attached.
 - IAM users can be members of multiple groups at once (ex. user Martiyn can be a part of group "Developers" and "SysAdmins").
 - The IAM user will inherit the permissions (or lack there of) that have been applied via IAM policies to the groups.
 - IAM groups cannot be a part of other IAM groups, only users can be members of IAM groups.

---------------------------------------------------------------------------------------------------------------------

IAM Roles

 - IAM roles are permissions that can be applied to certain AWS resources via IAM Policies.
 - The benefit of IAM roles is that they do not require set credentials, which gives them great flexibility.
 - Example of an IAM role is a policy, which is attached to a certain AWS resource (like an EC2 instance), granting it permissions to perform certain actions.
 - Once the policy is attached to the resource, it can then be configured to allow or deny actions of said resource.
 - Example again being an AWS EC2 instance being granted permissions to access the contents of an S3 bucket.
 - Once the EC2 instance is terminated, the IAM role is not applied to it anymore and is thus, not used further, creating no further obligations to it.

---------------------------------------------------------------------------------------------------------------------

IAM Organizations

 - Global Service
 - Allows to manage multiple AWS accounts
 - The main account is the management account
 - Other accounts are member accounts
 - Member accounts can only be part of the organization
 - Consolidated Billing across all accounts - single payment method
 - Pricing benefits from aggregated usage (volume discount for EC2, S3, etc..)
 - Shared reserved instances and Savings Plans discounts across all accounts
 - API is available to automate AWS account creation
 - You have a root Organizational Unit (OU)
 - Within the OU is the Management account
 - Whithin the OU, you can mace sub OUs (Dev, Prod, Test, as well as OUs within them like HR, Finance, etc..)
 - Advantages of AWS Organizations:
    1. Multi Account vs One Account Multi VPC
    2. Use tagging standards for billing purposes
    3. Enable CloudTrail Logs to central logging account
    4. Enable CloudTrail on all accounts, send logs to central S3 account
    5. Establish Cross Account Roles for Admin purposes
 - Security: Service Control Policies (SCP):
    1. IAM policies applied to OU or Accounts to restrict Users and Roles
    2. They do not apply to the management account (which has full admin power)
    3. Must have an explicit allow (does not allow anything by default - like IAM)
 - Usually, accounts in the root OU have FullAWSAccess SCP (full admin rights)
 - Even if you apply a Deny SCP to the management account, it will not apply (no SCPs apply to the management account)
 - For all other accounts, if you have an explicit deny policy on the OU, even if you have an allow policy after that on an account in the OU, the allow will not apply
 - SCPs are inherited from OUs (parent - child relationship)
 
---------------------------------------------------------------------------------------------------------------------

IAM Conditions

 - They apply to policies in IAM (any kind of policies):
    1. aws:SourceIp - restrict the client IP from which the API calls are being made
       - You can use the above policy to restrict every IP other than your company IP's access to your AWS resources
    2. aws:RequestedRegion - restrict the region API calls are made to
       - The above policy can be used to allow or deny access on a regional level
    3. ec2:ResourceTag - restrict based on tags
    4. aws:MultiFactorAuthPresent - force MFA
    5. Resource Policies & aws:PrincipalOrgID - can be used in any resource policies to restrict access to accounts that are/are not a member of an AWS Organization

---------------------------------------------------------------------------------------------------------------------

IAM Roles vs Resource Based Policies

 - Cross account:
    1. attaching a resource-based policy to a resource (example: S3 bucket policy)
       - access policy is applied to the bucket policy
    2. OR using a role as a proxy
       - access policy is applied to the role
 - Both approaches are valid but different
 - When you assume a role (user, application or service), you give up your original permissions and take the permissions assigned to the role
 - When using a resource-based policy, the principal does not have to give up his permissions
 - Example: User in account A needs to scan a DynamoDB table in Account A and dump it in an S3 bucket in Account B
 - Supported by:
    1. S3 buckets
    2. SNS topics
    3. SQS queues
    4. etc..

 - Amazon EventBridge - Security
 - When a rule runs, it needs permissions on the target
 - Resource-based policy:
    1. Lambda
    2. SQS
    3. SNS
    4. CloudWatch Logs
    5. API Gateway
 - IAM role:
    1. Kinesis stream
    2. Systems Manager Run Command
    3. ECS tasks

---------------------------------------------------------------------------------------------------------------------

IAM Permission Boundaries

 - IAM Permission Boundaries are supported for users and roles (not groups)
 - Advanced feature to use a managed policy to set the maximum permissions an IAM entity can get
 - If you set an IAM Policy with permissions outside of the IAM Permissions Boundary, the policy will not be applied
 - IAM Permission Boundaries can be used in combinations of AWS Organizations SCP
 - Use cases:
    1. Delegate responsibilities to non administrators within their permission boundaries, for example to create new IAM users
    2. Allow developers to self-assign policies and manage their own permissions, while making sure they can't escalate their privileges (make themselves admin)
    3. Useful to restrict one specific user (instead of a whole account using Organizations & SCP)

 - NOTE: If there is an explicit Deny in a policy, access will not be allowed, even if there is a contradicting allow!
 - NOTE: If there is no explicit Deny but neither is there an explicit Allow in a policy, access will not be allowed.

---------------------------------------------------------------------------------------------------------------------

AWS IAM Identity Center (successor to AWS Single Sign-On)

 - One login (SSO) for all your:
    1. AWS accounts in AWS Organizations
    2. Business cloud apps (Salesforce, Box, Microsoft 365, ...)
    3. Works for SAML2.0-enabled applications
    4. EC2 Windows Instances

 - Identity providers:
    1. Built-in identity store in IAM Identity Center
    2. 3rd party: Active Directory, OneLogin, Okta, ...

 - AWS IAM Identity Center - Login Flow:

   Login to AWS account ------> AWS IAM Identity Center ---(select account)---> Management console opens with selected account logged in

 - How it works:

   Browser Interface ---(login)---> AWS IAM Identity Center ---(store/retrieve user identities)---> Active Directory/IAM Identity Center(built-in store)

 - From there, you integrate your SSO from the Identity Center to AWS Cloud/Business Cloud Apps/Custom SAML2.0-enabled apps

 - IAM Identity Center (Fine-grained Permissions and Assignments)
 - Multi-account Permissions:
    1. Manage access across AWS accounts in your AWS Organization
    2. Permission Sets - a collection of one or more IAM Policies assigned to users and groups to define AWS access
 - Applications assignments:
    1. SSO access to many SAML2.0 business apps (Salesforce, Box, MS 365)
    2. Provide required URLs, certificates and metadata
 - Attribute-Based Access Control (ABAC):
    1. Fine-grained permissions based on users' attributes stored in IAM Identity Center Identity Store
    2. Example: cost center, title, locale, ...
    3. Use case: Define permissions once, then modify AWS access by changing the attributes

---------------------------------------------------------------------------------------------------------------------

AWS Directory Services

 - What is MS Active Directory?:
 - Found on any Windows Server with AD Domain Services
 - Database of objects:
    1. User Accounts
    2. Computers
    3. Printers
    4. File Shares
    5. Security Groups
 - Centralized security management, create account, assign permissions
 - Objects are organized in trees
 - A group of trees is called a forest
 - Diagram:

   Domain Controller (John password) ---(sync to)---> All computers joined to the Domain Controller

 - AWS Directory Services allows you to create an Active Directory in AWS:
 - AWS Managed Microsoft AD:
    1. Create your own AD in AWS, manage users locally, supports MFA
    2. Establish "trust" connections with your on-premise AD
 - AD Connector:
    1. Directory Gateway (proxy) to redirect to on-prem AD, supports MFA
    2. Users are managed on the on-prem AD
 - Simple AD:
    1. AD-compatible managed directory on AWS
    2. Cannot be joined with on-prem AD

 - IAM Identity Center - AD Setup:
 - Connect to an AWS Managed MS AD (Directory Service):
    1. Integration is out of the box
 - Connect to a self-managed directory:
    1. Create Two-way Trust Relationship using AWS Managed Microsoft AD
    2. Other option is to use an AD Connector

---------------------------------------------------------------------------------------------------------------------



