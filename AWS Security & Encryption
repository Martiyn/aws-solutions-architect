Encryption 101 (Overview)

 - What is encryption?

 - Encryption in flight (TLS/SSL)
 - Data is encrypted before sending and decrypted after receiving
 - TLS certificates help using encryption (HTTPS)
 - Encryption in flight ensures no MITM (man in the middle attack) can happen
 - Diagram

   Client ---(username and password)---> TLS Encryption ------> TLS Decryption ---(username and password)---> HTTPS Website

 - Server-side encryption at rest
 - Data is encrypted after being received by the server
 - Data is decrypted before being sent
 - Data is stored in an encrypted form thanks to a key (usually data key)
 - The encryption/decryption keys must be managed somewhere, and the server must have access to that location
 - Diagram:

   Object ---(HTTP(S))---> Object + Data Key = Encryption ------> Enctypted object + Data key = Decryption ---(HTTP(S))---> Object

 - Everything between the objects is the server!

 - Client-side encryption
 - Data is encrypted by the client and never decrypted by the server
 - Data will be decrypted by a receiving client
 - The server should not be able to decrypt the data
 - Could leverage Envelope Encryption
 - Diagram:

   Object + Data key (client-side) ---(encryption)---> Encrypted object ---(store)---> Storage service(FTP, S3, ...)

   Storage service(FTP, S3, ...) ---(retrieve)---> Encrypted object + Data key ---(Decryption)---> Decrypted object

 - Encryption is completely handled client-side
 - No decryption or encryption occurs on the storage service

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Key Management Service (KMS)

 - Anytime you hear "encryption" for an AWS service, it's most likely KMS
 - AWS manages encryption keys for us
 - Fully integrated with IAM for authorization
 - Easy way to control access to your data
 - Able to audit KMS Key usage using CloudTrail
 - Seamlessly integrated into most AWS services (EBS, S3, RDS, SSM, ...)
 - NEVER store your secrets in plaintext, especially in your code!
    1. KMS Key Encryption also available through API calls (SDK, CLI)
    2. Encrypted secrets can be stored in the code / environment variables

 - KMS Keys Types:
 - KMS Keys is the new name of KMS Customer Managed Key
 - Symmetric:
    1. Single necryption key that is used to both Decrypt and Encrypt data
    2. AWS services that are integrated with KMS use Symmetric CMKs
    3. You never get access to the KMS Key unencrypted (must call KMS API to use)
 - Asymmetric (RSA & ECC key pairs):
    1. Public (Encrypt) and Private Key (Decrypt) pair
    2. Used for Encrypt/Decrypt, or Sign/Verify operations
    3. The public key is downloadable, but you can't access the Private Key unencrypted
    4. Use case: encryption outside of AWS by users who can't call the KMS API

 - Types of KMS Keys:
    1. AWS Owned Keys (free): SSE-S3, SSE-SQS, SSE-DDB (default key)
    2. AWS Managed Key (free): (aws/service-name, e.g.: aws/rds or aws/ebs)
    3. Customer managed keys created in KMS: $1 / month
    4. Customer managed keys imported (must be symmetric key): $1 / month
    5. + pay for all API calls to KMS ($0.03 / 10,000 calls)

 - Automatic Key rotation:
    1. AWS-managed KMS Key: automatic every 1 houd
    2. Customer-managed KMS Key: (must be enabled) automatic every 1 year

 - Copying Snapshots across regions (KMS keys are scoped per region):
    1. Take a snapshot of an EBS volume (which will be encrypted in the original region)
    2. Copy the snapshot to the 2nd region (re-encrypt the snapshot with another KMS key)
    3. We restore the snapshot into an EBS volume in region 2 (with the new encryption key)
 - Since KMS keys are regionally scoped, they cannot be transfered between regions

 - KMS Key Policies
 - Control access to KMS keys, "similar" to S3 bucket policies
 - Difference: you cannot control access without them

 - Default KMS Key Policy:
    1. Created if you don't provide a specific KMS Key Policy
    2. Complete access to the key to the root user (entire AWS account)
 - Custom KMS Key Policy:
    1. Define users, roles that can access the KMS key
    2. Define who can administer the key
    3. Useful for cross-account access of your KMS key
   
 - Copying Snapshots across accounts:
    1. Create a Snapshot, encrypted with your own KMS Key (Customer Managed Key)
    2. Attach a KMS Key Policy to authorize cross-account access
    3. Share the encrypted snapshot
    4. (in target) Create a copy of the Snapshot, encrypt it with a CMK in your account
    5. Create a volume from the snapshot

---------------------------------------------------------------------------------------------------------------------
