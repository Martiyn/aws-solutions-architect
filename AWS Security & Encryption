Encryption 101 (Overview)

 - What is encryption?

 - Encryption in flight (TLS/SSL)
 - Data is encrypted before sending and decrypted after receiving
 - TLS certificates help using encryption (HTTPS)
 - Encryption in flight ensures no MITM (man in the middle attack) can happen
 - Diagram

   Client ---(username and password)---> TLS Encryption ------> TLS Decryption ---(username and password)---> HTTPS Website

 - Server-side encryption at rest
 - Data is encrypted after being received by the server
 - Data is decrypted before being sent
 - Data is stored in an encrypted form thanks to a key (usually data key)
 - The encryption/decryption keys must be managed somewhere, and the server must have access to that location
 - Diagram:

   Object ---(HTTP(S))---> Object + Data Key = Encryption ------> Enctypted object + Data key = Decryption ---(HTTP(S))---> Object

 - Everything between the objects is the server!

 - Client-side encryption
 - Data is encrypted by the client and never decrypted by the server
 - Data will be decrypted by a receiving client
 - The server should not be able to decrypt the data
 - Could leverage Envelope Encryption
 - Diagram:

   Object + Data key (client-side) ---(encryption)---> Encrypted object ---(store)---> Storage service(FTP, S3, ...)

   Storage service(FTP, S3, ...) ---(retrieve)---> Encrypted object + Data key ---(Decryption)---> Decrypted object

 - Encryption is completely handled client-side
 - No decryption or encryption occurs on the storage service

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Key Management Service (KMS)

 - Anytime you hear "encryption" for an AWS service, it's most likely KMS
 - AWS manages encryption keys for us
 - Fully integrated with IAM for authorization
 - Easy way to control access to your data
 - Able to audit KMS Key usage using CloudTrail
 - Seamlessly integrated into most AWS services (EBS, S3, RDS, SSM, ...)
 - NEVER store your secrets in plaintext, especially in your code!
    1. KMS Key Encryption also available through API calls (SDK, CLI)
    2. Encrypted secrets can be stored in the code / environment variables

 - KMS Keys Types:
 - KMS Keys is the new name of KMS Customer Managed Key
 - Symmetric:
    1. Single necryption key that is used to both Decrypt and Encrypt data
    2. AWS services that are integrated with KMS use Symmetric CMKs
    3. You never get access to the KMS Key unencrypted (must call KMS API to use)
 - Asymmetric (RSA & ECC key pairs):
    1. Public (Encrypt) and Private Key (Decrypt) pair
    2. Used for Encrypt/Decrypt, or Sign/Verify operations
    3. The public key is downloadable, but you can't access the Private Key unencrypted
    4. Use case: encryption outside of AWS by users who can't call the KMS API

 - Types of KMS Keys:
    1. AWS Owned Keys (free): SSE-S3, SSE-SQS, SSE-DDB (default key)
    2. AWS Managed Key (free): (aws/service-name, e.g.: aws/rds or aws/ebs)
    3. Customer managed keys created in KMS: $1 / month
    4. Customer managed keys imported (must be symmetric key): $1 / month
    5. + pay for all API calls to KMS ($0.03 / 10,000 calls)

 - Automatic Key rotation:
    1. AWS-managed KMS Key: automatic every 1 houd
    2. Customer-managed KMS Key: (must be enabled) automatic every 1 year

 - Copying Snapshots across regions (KMS keys are scoped per region):
    1. Take a snapshot of an EBS volume (which will be encrypted in the original region)
    2. Copy the snapshot to the 2nd region (re-encrypt the snapshot with another KMS key)
    3. We restore the snapshot into an EBS volume in region 2 (with the new encryption key)
 - Since KMS keys are regionally scoped, they cannot be transfered between regions

 - KMS Key Policies
 - Control access to KMS keys, "similar" to S3 bucket policies
 - Difference: you cannot control access without them

 - Default KMS Key Policy:
    1. Created if you don't provide a specific KMS Key Policy
    2. Complete access to the key to the root user (entire AWS account)
 - Custom KMS Key Policy:
    1. Define users, roles that can access the KMS key
    2. Define who can administer the key
    3. Useful for cross-account access of your KMS key
   
 - Copying Snapshots across accounts:
    1. Create a Snapshot, encrypted with your own KMS Key (Customer Managed Key)
    2. Attach a KMS Key Policy to authorize cross-account access
    3. Share the encrypted snapshot
    4. (in target) Create a copy of the Snapshot, encrypt it with a CMK in your account
    5. Create a volume from the snapshot

 - KMS Multi-Region Keys:
 - You can have a key in one region, which will be replicated to other regions
 - The key ID will be the same in all regions
 - They are Identical KMS keys in different AWS Regions that can be used interchangeably
 - Multi-Region keys have the same key ID, key material, automatic rotation
 - Encrypt in one Region and decrypt in other Regions
 - No need to re-encrypt or making cross-region API calls
 - KMS Multi-Region are NOT global (Primary + Replicas)
 - Each Multi-Region key is managed independently
 - Not widely recommended aside from the below use cases:
    1. global client-side encryption
    2. encryption on Global DynamoDB
    3. Global Aurora

 - DynamoDB Global Tables and KMS Multi-Region Keys Client-Side encryption:
 - We can encrypt specific attributes client-side in our DynamoDB table using the Amazon DynamoDB Encryption Client
 - If we use a multi-region key, replicated in the same region as the DynamoDB Global table, then clients in these regions can use low-latency API calls to KMS in their region to decrypt the data client-side
 - Using client-side encryption, we can protect specific fields and guarantee only decryption if the client has access to an API key
    1. Encrypt attribute with primary MRK
    2. Put encrypted attribute in the DDB Table
    3. Global Table Replication
    4. Get encrypted attribute
    5. Decrypt attribute with replica of MRK

 - Global Aurora and KMS Multi-Region Keys Client-Side encryption:
 - We can encrypt specific attributes client-side in our Aurora table using the AWS Encryption SDK
 - Combined with Aurora Global Tables, the client-side encrypted data is replicated to other regions
 - If we use a multi-region key, replicated in the same region as the Global Aurora DB, then clients in these regions can use low-latency API calls to KMS in their region to decrypt the data client-side
 - Using client-side encryption, we can protect specific fields and guarantee only decryption if the client has access to an API key, we can protect specific fields even from DB admins
    1. Encrypt attribute with primary MRK
    2. Put encrypted column in the Aurora Table
    3. Global DB Replication
    4. Get encrypted column
    5. Decrypt attribute with replica of MRK

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

S3 Replication Encryption Considerations

 - Unencrypted objects and objects encrypted with SSE-S3 are replicated by default
 - Objects encrypted with SSE-C (customer provided key) can be replicated
 - For objects encrypted with SSE-KMS, you need to enable the option:
    1. Specify which KMS Key to encrypt the objects within the target bucket
    2. Adapt the KMS Key Policy for the target key
    3. An IAM Role with kms:Decrypt for the source KMS Key and kms:Encrypt for the target KMS Key
    4. You might get KMS throttling errors, in which case, you can ask for a Service Quotas increae
 - You can use multi-region AWS KMS Keys, but they are currently treated as independent keys by Amazon S3 (the object will still be decrypted and then encrypted)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

AMI Sharing Process Encrypted via KMS

 - AMI in Source Account is encrypted with KMS Key from Source Account
 - Must modify the image attribute to add a Launch Permission, which corresponds to the specified target AWS account
 - Must share the KMS Keys used to encrypt the snapshot the AMI references with the target account / IAM Role
 - IAM Role/User in the target account must have the permissions to DescribeKey, ReEncrypted, CreateGrant, Decrypt
 - When launching an Ec2 instance from the AMI, optionally the target account can specify a new KMS key in its own account to re-encrypt the volumes

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SSM Parameter Store

 - Secure storage for configuration and secrets
 - Optional Seamless Encryption using KMS
 - Serverless, scalable, durable, easy SDK
 - Version tracking of configurations / secrets
 - Security through IAM
 - Notifications with Amazon EventBridge
 - Integration with CloudFormation

 - SSH Parameter Store Hierarchy:

     */my-department/
      * my-app/
       * dev/
           * db-url
           * db-password
       * prod/
           * db-url
           * db-password

 - As seen by the dev and prod environments under the app, you can also have different departments and apps altogether
 - You can access the secrets of secrets manager through the parameter store with: /aws/reference/secretsmanager/secret_ID_in_Secrets_Manager
 - If you want to find the latest AMI for a Linux VM in your region through the parameter store, you can: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gb2 (this is public)

 - You have two types of parameter tiers:
    1. Standard
       - Total number of parameters allowed (per AWS acc and Region): 10,000
       - Maximum size of a parameter value: 4 KB
       - Parameter policies available: No
       - Cost: No additional charge
       - Storage Pricing: Free
    2. Advanced
       - Total number of parameters allowed (per AWS acc and Region): 100,000
       - Maximum size of a parameter value: 8 KB
       - Parameter policies available: Yes
       - Cost: Charges apply
       - Storage Pricing: $0.05 per advanced parameter per month

 - Parameter policies (for advanced params):
 - Allow to assign a TTL to a parameter (expiration date) to force updating or deleting sensitive data such as password
 - You can assign multiple policies at a time
 - You can create notifications for EventBridge

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

AWS Secrets Manager

 - Newer service, meant for storing secrets
 - Capability to force rotation of secrets every X days
 - Automate generation of secrets on rotation (uses Lambda)
 - Integration with RDS (MySQL, PostgreSQL, Aurora)
 - You can use Secrets Manager to store for example the username and password to a DB
 - Secrets are encrypted using KMS
 - Mostly meant for RDS integration

 - AWS Secrets Manager - Multi-Region Secrets:
 - Replicate Secrets across multiple AWS Regions
 - Secrets Manager keeps read replicas in sync with the primary Secret
 - You can promote a Replica Secret to Primary Secret in case of a disaster

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


